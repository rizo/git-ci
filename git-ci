#!/bin/sh

# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Git CI
# Author: Rizo <rizo@odis.io>
# Homepage: <https://github.com/rizo/git-ci>
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


POST_RECEIVE_CONTENT=$(cat <<'END_POST_RECEIVE'
#!/bin/sh

# This script starts the build process on post-receieve git hook.
# The $GIT_DIR is set by Git before executing the hook.

function log() {
  echo "$(date -u +%Y-%m-%d_%TZ) git-ci: $1"
}

if [ -z $GIT_DIR ]; then
  log "error: \$GIT_DIR is not set"
  log "this script should only be run as a git hook"
  exit 1
else
  ROOT="$GIT_DIR/.."
fi

function build {
  log "building..."
  START_TIME=`date +%s`
  make -C $ROOT ci
  END_TIME=`date +%s`
  log "build finished, took $((END_TIME - START_TIME)) seconds"
  log "     < Your disgusting human food is ready, sir! >"
  log "=^~^= ´"
}

echo "=-=- Git CI =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
echo "starting the build process..."
echo "waking up the ceiling kitten to fulfill your request..."
echo "     < Howdy, you hairless piece of human flesh! >"
echo "=^~^= ´"
echo "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="

# Setup logging.
TODAY=`date -u +"%Y-%m-%d"`
mkdir -p $ROOT/log
LOG_FILE="$ROOT/log/git-ci-${TODAY}.log"
exec 1>> $LOG_FILE
exec 2>> $LOG_FILE

# Finnaly run the build function.
build &

END_POST_RECEIVE
)

# Check if we're inside a git repository.
# Will print git's standard error message if not.
if ! git rev-parse --is-inside-work-tree > /dev/null
then
  exit 3
fi

USAGE="usage: git ci enable|disable"

if test "$#" -ne 1
then
  echo $USAGE
  exit 1
fi

GIT_DIR=$(git rev-parse --git-dir)
POST_RECEIVE_PATH="$GIT_DIR/hooks/post-receive"

function is_enabled {
  if test -s "$POST_RECEIVE_PATH"; then
    if grep 'git-ci' "$POST_RECEIVE_PATH" > /dev/null; then
      if test $(git config core.bare) == "true"; then
        return 0
      else
        echo "git-ci: fatal: git-ci is installed but the repository is not bare" > /dev/stderr
        exit 4
      fi
    else
      echo "git-ci: fatal: unknown post-receive hook already installed" > /dev/stderr
      exit 5
    fi
  else
    return 1
  fi
}

function enable {
  git config --bool core.bare true && \
    echo "$POST_RECEIVE_CONTENT" > "$POST_RECEIVE_PATH" && \
    chmod +x "$POST_RECEIVE_PATH"
  return 0
}

function disable {
  git config --bool core.bare false
  rm "$POST_RECEIVE_PATH"
  return 0
}

case "$1" in
  enable)
    if is_enabled
    then
      echo "git-ci: error: already enabled" > /dev/stderr
      exit 1
    else
      enable
      echo 'git-ci: enabled, `make ci` will be called on updates' > /dev/stderr
      exit 0
    fi
    ;;

  disable)
    if ! is_enabled
    then
      echo "git-ci: error: already disabled" > /dev/stderr
      exit 2
    else
      disable
      exit 0
    fi
    ;;

  status)
    if is_enabled
    then echo "git-ci: enabled"
    else echo "git-ci: disabled"
    fi
    exit 0
    ;;

  -h | --help)
    echo $USAGE
    exit 0
    ;;

  *)
    echo $USAGE
    exit 1
esac

